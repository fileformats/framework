package reader

import (
	"bytes"
	"testing"
	"encoding/binary"
)

var data = []byte{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
}

func TestReader(t *testing.T) {
	r := New(bytes.NewReader(data))
	if v := r.Byte(); v != 0 || r.BytesRead() != 1 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt8(); v != 1 || r.BytesRead() != 2 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int8(); v != 2 || r.BytesRead() != 3 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt16(); v != 0x0304 || r.BytesRead() != 5 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int16(); v != 0x0506 || r.BytesRead() != 7 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt32(); v != 0x708090a || r.BytesRead() != 11 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int32(); v != 0xb0c0d0e || r.BytesRead() != 15 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt64(); v != 0x0f10111213141516 || r.BytesRead() != 23 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int64(); v != 0x1718191a1b1c1d1e || r.BytesRead() != 31 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Float32(); v != 3.3908725e-20 || r.BytesRead() != 35 {
		t.Errorf("Failed to read correct value: %v", v)
	}
	if v := r.Float64(); v != 2.114568376788255e-139 || r.BytesRead() != 43 {
		t.Errorf("Failed to read correct value: %v", v)
	}
	r.SetByteOrder(binary.LittleEndian)
	if v := r.Byte(); v != 0x2b || r.BytesRead() != 44 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt8(); v != 0x2c || r.BytesRead() != 45 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int8(); v != 0x2d || r.BytesRead() != 46 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt16(); v != 0x2f2e || r.BytesRead() != 48 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int16(); v != 0x3130 || r.BytesRead() != 50 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt32(); v != 0x35343332 || r.BytesRead() != 54 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int32(); v != 0x39383736 || r.BytesRead() != 58 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.UInt64(); v != 0x41403f3e3d3c3b3a || r.BytesRead() != 66 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Int64(); v != 0x4948474645444342 || r.BytesRead() != 74 {
		t.Errorf("Failed to read correct value: %x", v)
	}
	if v := r.Float32(); v != 2.1421789e+08 || r.BytesRead() != 78 {
		t.Errorf("Failed to read correct value: %v", v)
	}
	if v := r.Float64(); v != 1.1380968838622396e+103 || r.BytesRead() != 86 {
		t.Errorf("Failed to read correct value: %v", v)
	}

	var tmp = make([]byte, 10)
	if r.Unpack(&tmp); !bytes.Equal(tmp, []byte{0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f}) || r.BytesRead() != 96 {
		t.Errorf("Failed to read correct value: %x", tmp)
	}
}
